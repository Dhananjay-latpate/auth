"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.js":
/*!***************************!*\
  !*** ./src/middleware.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"middleware\": () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/server.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_server__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction middleware(request) {\n    // Get the token from the cookies\n    const token = request.cookies.get(\"token\")?.value;\n    // Extract query parameters\n    const url = new URL(request.url);\n    const loggedOut = url.searchParams.get(\"logged_out\") === \"true\";\n    const loginRedirect = url.searchParams.get(\"login_redirect\") === \"true\";\n    const timestamp = url.searchParams.get(\"t\"); // Check timestamp to ensure logout is fresh\n    // Get the pathname for easier use\n    const pathname = request.nextUrl.pathname;\n    // Gather request source info\n    const referer = request.headers.get(\"referer\") || \"\";\n    // For debugging\n    console.log(`[Middleware] Path: ${pathname}, Token: ${token ? \"exists\" : \"none\"}, Logged out: ${loggedOut}`);\n    console.log(`[Middleware] Referer: ${referer}`);\n    // Define routes\n    const protectedRoutes = [\n        \"/dashboard\",\n        \"/profile\",\n        \"/admin\"\n    ];\n    const authRoutes = [\n        \"/login\",\n        \"/register\",\n        \"/forgot-password\"\n    ];\n    const specialAuthRoutes = [\n        \"/login/verify-2fa\",\n        \"/login/recovery\"\n    ];\n    // Check route types\n    const isProtectedRoute = protectedRoutes.some((route)=>pathname === route || pathname.startsWith(`${route}/`));\n    const isAuthRoute = authRoutes.some((route)=>pathname === route || pathname.startsWith(`${route}/`));\n    const isSpecialAuthRoute = specialAuthRoutes.some((route)=>pathname.startsWith(route));\n    // Check if coming from a protected route\n    const comingFromProtectedRoute = protectedRoutes.some((route)=>referer && referer.includes(route));\n    // CASE 1: No token + Protected route = Redirect to login\n    if (isProtectedRoute && !token) {\n        console.log(`[Middleware] No auth token, redirecting to login from ${pathname}`);\n        const loginUrl = new URL(\"/login\", request.url);\n        // Store the original URL as callback\n        if (pathname !== \"/dashboard\") {\n            loginUrl.searchParams.set(\"callbackUrl\", pathname);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(loginUrl);\n    }\n    // CASE 2: Token + Auth route with specific exceptions\n    if (token && isAuthRoute && !isSpecialAuthRoute) {\n        // Check the referer header - if coming from dashboard, always allow access to login page\n        if (pathname === \"/login\" && comingFromProtectedRoute) {\n            console.log(`[Middleware] Coming from protected route to /login, breaking potential loop`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        }\n        // Don't redirect if explicitly logged_out=true\n        if (loggedOut) {\n            // Double check: If parameter includes t, it's a fresh logout\n            if (timestamp) {\n                console.log(`[Middleware] Fresh logout detected, allowing access to ${pathname}`);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n            }\n            console.log(`[Middleware] Has token but logged_out=true, allowing access to ${pathname}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        }\n        // Don't redirect if explicitly login_redirect=true\n        if (loginRedirect) {\n            console.log(`[Middleware] Explicit login redirect requested, allowing access to ${pathname}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        }\n        // Otherwise redirect to dashboard\n        console.log(`[Middleware] Already authenticated, redirecting to dashboard`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/dashboard\", request.url));\n    }\n    // CASE 3: Root path with token = Redirect to dashboard (unless logged out)\n    if (pathname === \"/\" && token && !loggedOut) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/dashboard\", request.url));\n    }\n    // Default: Allow request to proceed\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n}\n// Configure the paths that should be matched by this middleware\nconst config = {\n    matcher: [\n        \"/\",\n        \"/dashboard\",\n        \"/profile/:path*\",\n        \"/admin/:path*\",\n        \"/login\",\n        \"/login/:path*\",\n        \"/register\",\n        \"/forgot-password\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBT2IsMERBQWlCO1FBQzFCLENBQUM7UUFFRCxtREFBbUQ7UUFDbkQsSUFBSVcsZUFBZTtZQUNqQk0sUUFBUUMsR0FBRyxDQUNULENBQUMsbUVBQW1FLEVBQUVMLFNBQVMsQ0FBQztZQUVsRixPQUFPYiwwREFBaUI7UUFDMUIsQ0FBQztRQUVELGtDQUFrQztRQUNsQ2lCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDREQUE0RCxDQUFDO1FBQzFFLE9BQU9sQiw4REFBcUIsQ0FBQyxJQUFJUSxJQUFJLGNBQWNOLFFBQVFLLEdBQUc7SUFDaEUsQ0FBQztJQUVELDJFQUEyRTtJQUMzRSxJQUFJTSxhQUFhLE9BQU9WLFNBQVMsQ0FBQ00sV0FBVztRQUMzQyxPQUFPVCw4REFBcUIsQ0FBQyxJQUFJUSxJQUFJLGNBQWNOLFFBQVFLLEdBQUc7SUFDaEUsQ0FBQztJQUVELG9DQUFvQztJQUNwQyxPQUFPUCwwREFBaUI7QUFDMUIsQ0FBQztBQUVELGdFQUFnRTtBQUN6RCxNQUFNa0MsU0FBUztJQUNwQkMsU0FBUztRQUNQO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtBQUNILEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL21pZGRsZXdhcmUuanM/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxdWVzdCkge1xuICAvLyBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGNvb2tpZXNcbiAgY29uc3QgdG9rZW4gPSByZXF1ZXN0LmNvb2tpZXMuZ2V0KFwidG9rZW5cIik/LnZhbHVlO1xuXG4gIC8vIEV4dHJhY3QgcXVlcnkgcGFyYW1ldGVyc1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3QgbG9nZ2VkT3V0ID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJsb2dnZWRfb3V0XCIpID09PSBcInRydWVcIjtcbiAgY29uc3QgbG9naW5SZWRpcmVjdCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KFwibG9naW5fcmVkaXJlY3RcIikgPT09IFwidHJ1ZVwiO1xuICBjb25zdCB0aW1lc3RhbXAgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChcInRcIik7IC8vIENoZWNrIHRpbWVzdGFtcCB0byBlbnN1cmUgbG9nb3V0IGlzIGZyZXNoXG5cbiAgLy8gR2V0IHRoZSBwYXRobmFtZSBmb3IgZWFzaWVyIHVzZVxuICBjb25zdCBwYXRobmFtZSA9IHJlcXVlc3QubmV4dFVybC5wYXRobmFtZTtcblxuICAvLyBHYXRoZXIgcmVxdWVzdCBzb3VyY2UgaW5mb1xuICBjb25zdCByZWZlcmVyID0gcmVxdWVzdC5oZWFkZXJzLmdldChcInJlZmVyZXJcIikgfHwgXCJcIjtcblxuICAvLyBGb3IgZGVidWdnaW5nXG4gIGNvbnNvbGUubG9nKFxuICAgIGBbTWlkZGxld2FyZV0gUGF0aDogJHtwYXRobmFtZX0sIFRva2VuOiAke1xuICAgICAgdG9rZW4gPyBcImV4aXN0c1wiIDogXCJub25lXCJcbiAgICB9LCBMb2dnZWQgb3V0OiAke2xvZ2dlZE91dH1gXG4gICk7XG4gIGNvbnNvbGUubG9nKGBbTWlkZGxld2FyZV0gUmVmZXJlcjogJHtyZWZlcmVyfWApO1xuXG4gIC8vIERlZmluZSByb3V0ZXNcbiAgY29uc3QgcHJvdGVjdGVkUm91dGVzID0gW1wiL2Rhc2hib2FyZFwiLCBcIi9wcm9maWxlXCIsIFwiL2FkbWluXCJdO1xuICBjb25zdCBhdXRoUm91dGVzID0gW1wiL2xvZ2luXCIsIFwiL3JlZ2lzdGVyXCIsIFwiL2ZvcmdvdC1wYXNzd29yZFwiXTtcbiAgY29uc3Qgc3BlY2lhbEF1dGhSb3V0ZXMgPSBbXCIvbG9naW4vdmVyaWZ5LTJmYVwiLCBcIi9sb2dpbi9yZWNvdmVyeVwiXTtcblxuICAvLyBDaGVjayByb3V0ZSB0eXBlc1xuICBjb25zdCBpc1Byb3RlY3RlZFJvdXRlID0gcHJvdGVjdGVkUm91dGVzLnNvbWUoXG4gICAgKHJvdXRlKSA9PiBwYXRobmFtZSA9PT0gcm91dGUgfHwgcGF0aG5hbWUuc3RhcnRzV2l0aChgJHtyb3V0ZX0vYClcbiAgKTtcblxuICBjb25zdCBpc0F1dGhSb3V0ZSA9IGF1dGhSb3V0ZXMuc29tZShcbiAgICAocm91dGUpID0+IHBhdGhuYW1lID09PSByb3V0ZSB8fCBwYXRobmFtZS5zdGFydHNXaXRoKGAke3JvdXRlfS9gKVxuICApO1xuXG4gIGNvbnN0IGlzU3BlY2lhbEF1dGhSb3V0ZSA9IHNwZWNpYWxBdXRoUm91dGVzLnNvbWUoKHJvdXRlKSA9PlxuICAgIHBhdGhuYW1lLnN0YXJ0c1dpdGgocm91dGUpXG4gICk7XG5cbiAgLy8gQ2hlY2sgaWYgY29taW5nIGZyb20gYSBwcm90ZWN0ZWQgcm91dGVcbiAgY29uc3QgY29taW5nRnJvbVByb3RlY3RlZFJvdXRlID0gcHJvdGVjdGVkUm91dGVzLnNvbWUoXG4gICAgKHJvdXRlKSA9PiByZWZlcmVyICYmIHJlZmVyZXIuaW5jbHVkZXMocm91dGUpXG4gICk7XG5cbiAgLy8gQ0FTRSAxOiBObyB0b2tlbiArIFByb3RlY3RlZCByb3V0ZSA9IFJlZGlyZWN0IHRvIGxvZ2luXG4gIGlmIChpc1Byb3RlY3RlZFJvdXRlICYmICF0b2tlbikge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtNaWRkbGV3YXJlXSBObyBhdXRoIHRva2VuLCByZWRpcmVjdGluZyB0byBsb2dpbiBmcm9tICR7cGF0aG5hbWV9YFxuICAgICk7XG4gICAgY29uc3QgbG9naW5VcmwgPSBuZXcgVVJMKFwiL2xvZ2luXCIsIHJlcXVlc3QudXJsKTtcblxuICAgIC8vIFN0b3JlIHRoZSBvcmlnaW5hbCBVUkwgYXMgY2FsbGJhY2tcbiAgICBpZiAocGF0aG5hbWUgIT09IFwiL2Rhc2hib2FyZFwiKSB7XG4gICAgICBsb2dpblVybC5zZWFyY2hQYXJhbXMuc2V0KFwiY2FsbGJhY2tVcmxcIiwgcGF0aG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QobG9naW5VcmwpO1xuICB9XG5cbiAgLy8gQ0FTRSAyOiBUb2tlbiArIEF1dGggcm91dGUgd2l0aCBzcGVjaWZpYyBleGNlcHRpb25zXG4gIGlmICh0b2tlbiAmJiBpc0F1dGhSb3V0ZSAmJiAhaXNTcGVjaWFsQXV0aFJvdXRlKSB7XG4gICAgLy8gQ2hlY2sgdGhlIHJlZmVyZXIgaGVhZGVyIC0gaWYgY29taW5nIGZyb20gZGFzaGJvYXJkLCBhbHdheXMgYWxsb3cgYWNjZXNzIHRvIGxvZ2luIHBhZ2VcbiAgICBpZiAocGF0aG5hbWUgPT09IFwiL2xvZ2luXCIgJiYgY29taW5nRnJvbVByb3RlY3RlZFJvdXRlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFtNaWRkbGV3YXJlXSBDb21pbmcgZnJvbSBwcm90ZWN0ZWQgcm91dGUgdG8gL2xvZ2luLCBicmVha2luZyBwb3RlbnRpYWwgbG9vcGBcbiAgICAgICk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCByZWRpcmVjdCBpZiBleHBsaWNpdGx5IGxvZ2dlZF9vdXQ9dHJ1ZVxuICAgIGlmIChsb2dnZWRPdXQpIHtcbiAgICAgIC8vIERvdWJsZSBjaGVjazogSWYgcGFyYW1ldGVyIGluY2x1ZGVzIHQsIGl0J3MgYSBmcmVzaCBsb2dvdXRcbiAgICAgIGlmICh0aW1lc3RhbXApIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYFtNaWRkbGV3YXJlXSBGcmVzaCBsb2dvdXQgZGV0ZWN0ZWQsIGFsbG93aW5nIGFjY2VzcyB0byAke3BhdGhuYW1lfWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5uZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgW01pZGRsZXdhcmVdIEhhcyB0b2tlbiBidXQgbG9nZ2VkX291dD10cnVlLCBhbGxvd2luZyBhY2Nlc3MgdG8gJHtwYXRobmFtZX1gXG4gICAgICApO1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5uZXh0KCk7XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgcmVkaXJlY3QgaWYgZXhwbGljaXRseSBsb2dpbl9yZWRpcmVjdD10cnVlXG4gICAgaWYgKGxvZ2luUmVkaXJlY3QpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgW01pZGRsZXdhcmVdIEV4cGxpY2l0IGxvZ2luIHJlZGlyZWN0IHJlcXVlc3RlZCwgYWxsb3dpbmcgYWNjZXNzIHRvICR7cGF0aG5hbWV9YFxuICAgICAgKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UubmV4dCgpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSByZWRpcmVjdCB0byBkYXNoYm9hcmRcbiAgICBjb25zb2xlLmxvZyhgW01pZGRsZXdhcmVdIEFscmVhZHkgYXV0aGVudGljYXRlZCwgcmVkaXJlY3RpbmcgdG8gZGFzaGJvYXJkYCk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChuZXcgVVJMKFwiL2Rhc2hib2FyZFwiLCByZXF1ZXN0LnVybCkpO1xuICB9XG5cbiAgLy8gQ0FTRSAzOiBSb290IHBhdGggd2l0aCB0b2tlbiA9IFJlZGlyZWN0IHRvIGRhc2hib2FyZCAodW5sZXNzIGxvZ2dlZCBvdXQpXG4gIGlmIChwYXRobmFtZSA9PT0gXCIvXCIgJiYgdG9rZW4gJiYgIWxvZ2dlZE91dCkge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QobmV3IFVSTChcIi9kYXNoYm9hcmRcIiwgcmVxdWVzdC51cmwpKTtcbiAgfVxuXG4gIC8vIERlZmF1bHQ6IEFsbG93IHJlcXVlc3QgdG8gcHJvY2VlZFxuICByZXR1cm4gTmV4dFJlc3BvbnNlLm5leHQoKTtcbn1cblxuLy8gQ29uZmlndXJlIHRoZSBwYXRocyB0aGF0IHNob3VsZCBiZSBtYXRjaGVkIGJ5IHRoaXMgbWlkZGxld2FyZVxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgbWF0Y2hlcjogW1xuICAgIFwiL1wiLFxuICAgIFwiL2Rhc2hib2FyZFwiLFxuICAgIFwiL3Byb2ZpbGUvOnBhdGgqXCIsXG4gICAgXCIvYWRtaW4vOnBhdGgqXCIsXG4gICAgXCIvbG9naW5cIixcbiAgICBcIi9sb2dpbi86cGF0aCpcIixcbiAgICBcIi9yZWdpc3RlclwiLFxuICAgIFwiL2ZvcmdvdC1wYXNzd29yZFwiLFxuICBdLFxufTtcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJtaWRkbGV3YXJlIiwicmVxdWVzdCIsInRva2VuIiwiY29va2llcyIsImdldCIsInZhbHVlIiwidXJsIiwiVVJMIiwibG9nZ2VkT3V0Iiwic2VhcmNoUGFyYW1zIiwibG9naW5SZWRpcmVjdCIsInRpbWVzdGFtcCIsInBhdGhuYW1lIiwibmV4dFVybCIsInJlZmVyZXIiLCJoZWFkZXJzIiwiY29uc29sZSIsImxvZyIsInByb3RlY3RlZFJvdXRlcyIsImF1dGhSb3V0ZXMiLCJzcGVjaWFsQXV0aFJvdXRlcyIsImlzUHJvdGVjdGVkUm91dGUiLCJzb21lIiwicm91dGUiLCJzdGFydHNXaXRoIiwiaXNBdXRoUm91dGUiLCJpc1NwZWNpYWxBdXRoUm91dGUiLCJjb21pbmdGcm9tUHJvdGVjdGVkUm91dGUiLCJpbmNsdWRlcyIsImxvZ2luVXJsIiwic2V0IiwicmVkaXJlY3QiLCJuZXh0IiwiY29uZmlnIiwibWF0Y2hlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.js\n");

/***/ })

});